scripts:
  init:
    desc: Builds config file
    cmd: cli/denote.ts init
    allow:
      - write
      - read
      - net
    noCheck: true

  serve:
    desc: Starts local server
    cmd: cli/denote.ts serve
    allow:
      - net
      - read
    watch: true
    noCheck: true

  register:
    desc: Publishes page
    cmd: cli/denote.ts register
    allow:
      - net
      - read
    noCheck: true

  unregister:
    desc: Removes page
    cmd: cli/denote.ts unregister
    allow:
      - net
      - read
    noCheck: true

  start:
    cmd: deployctl run --no-check --env=.env --watch ./server.ts

  deps:
    desc: Update dependencies with ensuring pass tests
    cmd: udd deps.ts --test="vr test"

  lint:
    desc: Runs lint
    cmd: deno lint --ignore=cov_profile,denote_server.js

  fmt:
    desc: Runs format
    cmd: deno fmt --ignore=cov_profile,denote_server.js

  pre-commit:
    cmd: |
      FILES=$(git diff --staged --name-only --diff-filter=ACMR "*.ts")
          [ -z "$FILES" ] && exit 0
          echo "$FILES" | xargs deno lint
          echo "$FILES" | xargs deno fmt
          # echo "$FILES" | xargs git add
    desc: Lints and formats staged files
    gitHook: pre-commit

  test:
    desc: Runs the tests
    cmd: deno test --reload
    gitHook: pre-push

  cov:
    desc: Shows uncovered lists
    cmd:
      - vr test --coverage=cov_profile
      - deno coverage cov_profile

  ci:
    desc: Runs lint, check format and test
    cmd:
      - vr lint
      - vr fmt --check
      - vr test

  cd:
    desc: Publishes latest denote.yml
    cmd:
      - vr register denote.yml --name denote

  commitlint:
    # dependencies: commitlint and @commitlint/config-conventional
    # yarn global add commitlint @commitlint/config-conventional
    desc: Checks commit messages format with commitlint
    cmd: commitlint -x @commitlint/config-conventional -e ${GIT_ARGS[1]}
    gitHook: commit-msg
